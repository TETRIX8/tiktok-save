 # -*- coding: utf-8 -*-
from datetime import timedelta, date

import requests
import asyncio
import aiohttp
import re
import sqlite3
import json

from datetime import date
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from keyboards import *
from config import *
from pagination import InlinePagination, InlinePagination2, FavoritesPagination, NewsPagination
from db import Sqliter


bot = Bot(token=TOKEN, parse_mode='HTML')
admin_id = admins
chatid = chat
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
scheduler = AsyncIOScheduler()
db = Sqliter('database.db')

category_list = {'films': '–§–∏–ª—å–º—ã', 'serials' : '–°–µ—Ä–∏–∞–ª—ã','series' : '–°–µ—Ä–∏–∞–ª—ã', 'cartoons':'–ú—É–ª—å—Ç—Ñ–∏–ª—å–º—ã', 'cartoon':'–ú—É–ª—å—Ç—Ñ–∏–ª—å–º—ã', 'cartoon-serials' : '–ú—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª—ã', 'cartoon-series': '–ú—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª—ã', 'anime-film': '–ê–Ω–∏–º–µ-—Ñ–∏–ª—å–º—ã', 'anime' : '–ê–Ω–∏–º–µ-—Ñ–∏–ª—å–º—ã', 'anime-serials' : '–ê–Ω–∏–º–µ-—Å–µ—Ä–∏–∞–ª—ã', 'anime-series' : '–ê–Ω–∏–º–µ-—Å–µ—Ä–∏–∞–ª—ã', 'tv-shows' : '–¢–í-–®–æ—É', 'tv-show': '–¢–í-–®–æ—É', 'film': '–§–∏–ª—å–º—ã'}
last_domain = ''

class GetUserInfo(StatesGroup):
    us_zapros_video = State()
    us_zapros_film = State()
    us_zapros_serial = State()
    us_zapros_animefilm = State()
    us_zapros_animeser = State()
    us_zapros_cartoon = State()
    us_zapros_cartoonser = State()
    us_zapros_tv = State()
    us_zapros_film_number = State()
    us_zapros_serial_number = State()
    us_zapros_animefilm_number = State()
    us_zapros_animeser_number = State()
    us_zapros_cartoon_number = State()
    us_zapros_cartoonser_number = State()
    us_zapros_tv_number = State()


database = open("users_id.txt", "r", encoding="utf-8")
datausers = set()
for line in database:
    datausers.add(line.strip())
database.close()

async def add_collection(data):
    with open('collections.json', 'w', encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

async def add_news_films(data):
    with open('news_films.json', 'w', encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

async def add_news_serials(data):
    with open('news_serials.json', 'w', encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

async def add_news_show(data):
    with open('news_show.json', 'w', encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

async def add_popular_films(data):
    with open('popular_films.json', 'w', encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

async def add_popular_series(data):
    with open('popular_series.json', 'w', encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

async def add_popular_cartoon(data):
    with open('popular_cartoon.json', 'w', encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

async def add_popular_cartoon_serials(data):
    with open('popular_cartoon_serials.json', 'w', encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

async def add_popular_anime(data):
    with open('popular_anime.json', 'w', encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

async def add_popular_anime_serials(data):
    with open('popular_anime_serials.json', 'w', encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

async def add_popular_show(data):
    with open('popular_show.json', 'w', encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

async def update_popular():
    print('update_popular | –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤.')
    await bot.send_message(chat_id=admin_id, text='üîÉ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤.\nüïò –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..')
    async with aiohttp.ClientSession() as session:
        async with session.get(f'https://api1673051707.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e&sort=-views&type=films&limit=50&year=2023', timeout=None) as response:
            response = await response.json()
    popular_films = []
    results = response['results']
    for result in results:
        film_id = result['id']
        name = result['name']
        type = category_list[result['type']]
        year = result["year"]
        poster = result["poster"]
        try:
            kinopoisk = result["kinopoisk"]
        except KeyError:
            kinopoisk = None
        try:
            imdb = result["imdb"]
        except KeyError:
            imdb = None
        try:
            quality = result["quality"]
        except KeyError:
            quality = None
        try:
            country = result["country"].values()
            country = ', '.join(country)
        except:
            country = ''
        try:
            genre = result['genre'].values()
            genre = ', '.join(genre)
        except KeyError:
            genre = ''
        popular_films.append({'id':film_id, 'name': name, 'year': year,'quality':quality,'genre':genre, 'type':type,'country':country,'poster':poster, 'kinopoisk': kinopoisk, 'imdb': imdb})
    data = {'data': popular_films}
    await add_popular_films(data)
    print('update_popular | –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤.')
    await bot.send_message(chat_id=admin_id, text='üîÉ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤.\nüïò –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..')
    async with aiohttp.ClientSession() as session:
        async with session.get(f'https://api1673051707.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e&sort=-views&type=serials&join_seasons=false&limit=50&year=2023', timeout=None) as response:
            response = await response.json()
    popular_series = []
    results = response['results']
    for result in results:
        film_id = result['id']
        name = result['name']
        type = category_list[result['type']]
        year = result["year"]
        poster = result["poster"]
        try:
            kinopoisk = result["kinopoisk"]
        except KeyError:
            kinopoisk = None
        try:
            imdb = result["imdb"]
        except KeyError:
            imdb = None
        try:
            quality = result["quality"]
        except KeyError:
            quality = None
        try:
            country = result["country"].values()
            country = ', '.join(country)
        except:
            country = ''
        try:
            genre = result['genre'].values()
            genre = ', '.join(genre)
        except KeyError:
            genre = ''
        popular_series.append({'id':film_id, 'name': name, 'year': year,'quality':quality,'genre':genre, 'type':type,'country':country,'poster':poster, 'kinopoisk': kinopoisk, 'imdb': imdb})
    data = {'data': popular_series}
    current_date = date.today()
    await add_popular_series(data)
    print('update_popular | –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
    await bot.send_message(chat_id=chatid, text=f'‚úÖ <b>{current_date}</b> | –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ <b>¬´–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ¬ª</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\nüèÖ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ <b>—Ñ–∏–ª—å–º—ã</b> –∏ <b>—Å–µ—Ä–∏–∞–ª—ã</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\nüëâ @kinozzz_new_bot')

async def update_popular_mult():
    print('update_popular | –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤.')
    await bot.send_message(chat_id=admin_id, text='üîÉ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤.\nüïò –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..')
    async with aiohttp.ClientSession() as session:
        async with session.get(f'https://api1673051707.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e&sort=-views&type=cartoon&limit=50&year=2023', timeout=None) as response:
            response = await response.json()
    popular_cartoon = []
    results = response['results']
    for result in results:
        film_id = result['id']
        name = result['name']
        type = category_list[result['type']]
        year = result["year"]
        poster = result["poster"]
        try:
            kinopoisk = result["kinopoisk"]
        except KeyError:
            kinopoisk = None
        try:
            imdb = result["imdb"]
        except KeyError:
            imdb = None
        try:
            quality = result["quality"]
        except KeyError:
            quality = None
        try:
            country = result["country"].values()
            country = ', '.join(country)
        except:
            country = ''
        try:
            genre = result['genre'].values()
            genre = ', '.join(genre)
        except KeyError:
            genre = ''
        popular_cartoon.append({'id':film_id, 'name': name, 'year': year,'quality':quality,'genre':genre, 'type':type,'country':country,'poster':poster, 'kinopoisk': kinopoisk, 'imdb': imdb})
    data = {'data': popular_cartoon}
    await add_popular_cartoon(data)
    print('update_popular | –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª–æ–≤.')
    await bot.send_message(chat_id=admin_id, text='üîÉ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª–æ–≤.\nüïò –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..')
    async with aiohttp.ClientSession() as session:
        async with session.get(f'https://api1673051707.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e&sort=-views&type=cartoon-serials&join_seasons=false&limit=50&year=2023', timeout=None) as response:
            response = await response.json()
    popular_cartoon_serials = []
    results = response['results']
    for result in results:
        film_id = result['id']
        name = result['name']
        type = category_list[result['type']]
        year = result["year"]
        poster = result["poster"]
        try:
            kinopoisk = result["kinopoisk"]
        except KeyError:
            kinopoisk = None
        try:
            imdb = result["imdb"]
        except KeyError:
            imdb = None
        try:
            quality = result["quality"]
        except KeyError:
            quality = None
        try:
            country = result["country"].values()
            country = ', '.join(country)
        except:
            country = ''
        try:
            genre = result['genre'].values()
            genre = ', '.join(genre)
        except KeyError:
            genre = ''
        popular_cartoon_serials.append({'id':film_id, 'name': name, 'year': year,'quality':quality,'genre':genre, 'type':type,'country':country,'poster':poster, 'kinopoisk': kinopoisk, 'imdb': imdb})
    data = {'data': popular_cartoon_serials}
    current_date = date.today()
    await add_popular_cartoon_serials(data)
    print('update_popular | –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
    await bot.send_message(chat_id=chatid, text=f'‚úÖ <b>{current_date}</b> | –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ <b>¬´–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ¬ª</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\nüèÖ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ <b>–º—É–ª—å—Ç—Ñ–∏–ª—å–º—ã</b> –∏ <b>–º—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª—ã</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\nüëâ @kinozzz_new_bot')

async def update_popular_anime():
    print('update_popular | –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ.')
    await bot.send_message(chat_id=admin_id, text='üîÉ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ.\nüïò –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..')
    async with aiohttp.ClientSession() as session:
        async with session.get(f'https://api1673051707.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e&sort=-views&type=anime&limit=50&year=2023', timeout=None) as response:
            response = await response.json()
    popular_anime = []
    results = response['results']
    for result in results:
        film_id = result['id']
        name = result['name']
        type = category_list[result['type']]
        year = result["year"]
        poster = result["poster"]
        try:
            kinopoisk = result["kinopoisk"]
        except KeyError:
            kinopoisk = None
        try:
            imdb = result["imdb"]
        except KeyError:
            imdb = None
        try:
            quality = result["quality"]
        except KeyError:
            quality = None
        try:
            country = result["country"].values()
            country = ', '.join(country)
        except:
            country = ''
        try:
            genre = result['genre'].values()
            genre = ', '.join(genre)
        except KeyError:
            genre = ''
        popular_anime.append({'id':film_id, 'name': name, 'year': year,'quality':quality,'genre':genre, 'type':type,'country':country,'poster':poster, 'kinopoisk': kinopoisk, 'imdb': imdb})
    data = {'data': popular_anime}
    await add_popular_anime(data)
    print('update_popular | –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ-—Å–µ—Ä–∏–∞–ª–æ–≤.')
    await bot.send_message(chat_id=admin_id, text='üîÉ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ-—Å–µ—Ä–∏–∞–ª–æ–≤.\nüïò –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..')
    async with aiohttp.ClientSession() as session:
        async with session.get(f'https://api1673051707.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e&sort=-views&type=anime-serials&join_seasons=false&limit=50&year=2023', timeout=None) as response:
            response = await response.json()
    popular_anime_serials = []
    results = response['results']
    for result in results:
        film_id = result['id']
        name = result['name']
        type = category_list[result['type']]
        year = result["year"]
        poster = result["poster"]
        try:
            kinopoisk = result["kinopoisk"]
        except KeyError:
            kinopoisk = None
        try:
            imdb = result["imdb"]
        except KeyError:
            imdb = None
        try:
            quality = result["quality"]
        except KeyError:
            quality = None
        try:
            country = result["country"].values()
            country = ', '.join(country)
        except:
            country = ''
        try:
            genre = result['genre'].values()
            genre = ', '.join(genre)
        except KeyError:
            genre = ''
        popular_anime_serials.append({'id':film_id, 'name': name, 'year': year,'quality':quality,'genre':genre, 'type':type,'country':country,'poster':poster, 'imdb': imdb, 'kinopoisk': kinopoisk})
    data = {'data': popular_anime_serials}
    current_date = date.today()
    await add_popular_anime_serials(data)
    print('update_popular | –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
    await bot.send_message(chat_id=chatid, text=f'‚úÖ <b>{current_date}</b> | –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ <b>¬´–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ¬ª</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\nüèÖ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ <b>–∞–Ω–∏–º–µ-—Ñ–∏–ª—å–º—ã</b> –∏ <b>–∞–Ω–∏–º–µ-—Å–µ—Ä–∏–∞–ª—ã</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\nüëâ @kinozzz_new_bot')

async def update_popular_show():
    print('update_popular | –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¢–í-—à–æ—É.')
    await bot.send_message(chat_id=admin_id, text='üîÉ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¢–í-—à–æ—É.\nüïò –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..')
    async with aiohttp.ClientSession() as session:
        async with session.get(f'https://api1673051707.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e&sort=-views&type=show&limit=50&year=2023', timeout=None) as response:
            response = await response.json()
    popular_show = []
    results = response['results']
    for result in results:
        film_id = result['id']
        name = result['name']
        type = category_list[result['type']]
        year = result["year"]
        poster = result["poster"]
        try:
            kinopoisk = result["kinopoisk"]
        except KeyError:
            kinopoisk = None
        try:
            imdb = result["imdb"]
        except KeyError:
            imdb = None
        try:
            quality = result["quality"]
        except KeyError:
            quality = None
        try:
            country = result["country"].values()
            country = ', '.join(country)
        except:
            country = ''
        try:
            genre = result['genre'].values()
            genre = ', '.join(genre)
        except KeyError:
            genre = ''
        popular_show.append({'id':film_id, 'name': name, 'year': year,'quality':quality,'genre':genre, 'type':type,'country':country,'poster':poster, 'imdb': imdb, 'kinopoisk': kinopoisk})
    data = {'data': popular_show}
    current_date = date.today()
    await add_popular_show(data)
    print('update_popular | –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
    await bot.send_message(chat_id=chatid, text=f'‚úÖ <b>{current_date}</b> | –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ <b>¬´–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ¬ª</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\nüèÖ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ <b>–¢–í-—à–æ—É</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\nüëâ @kinozzz_new_bot')

async def update_domain():
    global last_domain
    async with aiohttp.ClientSession() as session:
        async with session.get(f'https://api1665331096.bhcesh.me/embed-domain?token=3794a7638b5863cc60d7b2b9274fa32e') as response:
            response = await response.json()
    domain = response["domain"]
    if domain != last_domain:
        db.update_domain(domain)
        last_domain = domain

async def update_news_films():
    print('update_news_films | –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤.')
    await bot.send_message(chat_id=admin_id, text='üîÉ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤.\nüïò –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..')
    async with aiohttp.ClientSession() as session:
        async with session.get(f'https://api1664409738.bhcesh.me/video/news?limit=50&type=films&token=3794a7638b5863cc60d7b2b9274fa32e&year=2023', timeout=None) as response:
            response = await response.json()
    results = response['results']
    print(len(results))
    results = [result1['id'] for result1 in results]
    results = list(set(results))
    print(len(results))
    news_films = []
    for result in results:
        film_id = result
        async with aiohttp.ClientSession() as session:
            async with session.get(f'https://api1663355922.bhcesh.me/franchise/details?token=3794a7638b5863cc60d7b2b9274fa32e&id={film_id}', timeout=None) as response:
                film_data = await response.json()
        name = film_data['name']
        type = category_list[film_data['type']]
        year = film_data["year"]
        poster = film_data["poster"]
        try:
            kinopoisk = film_data["kinopoisk"]
        except KeyError:
            kinopoisk = None
        try:
            imdb = film_data["imdb"]
        except KeyError:
            imdb = None
        try:
            quality = film_data["quality"]
        except KeyError:
            quality = None
        try:
            country = film_data["country"].values()
            country = ', '.join(country)
        except:
            country = ''
        print(name)
        try:
            genre = film_data['genre'].values()
            genre = ', '.join(genre)
        except:
            genre = ''
        news_films.append({'id':film_id, 'name': name, 'year': year,'quality':quality,'genre':genre, 'type':type,'country':country,'poster':poster, 'imdb': imdb, 'kinopoisk': kinopoisk})
        await asyncio.sleep(3)
    news_films = {'data': news_films}
    current_date = date.today()
    await add_news_films(news_films)
    print('update_news_films | –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
    await bot.send_message(chat_id=chatid, text=f'‚úÖ <b>{current_date}</b> | –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ <b>¬´–ù–æ–≤–∏–Ω–∫–∏¬ª</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\nüÜï –ù–æ–≤—ã–µ <b>—Ñ–∏–ª—å–º—ã</b> –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\nüëâ @kinozzz_new_bot')

async def update_news_serials():
    print('update_news_serials | –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤.')
    await bot.send_message(chat_id=admin_id, text='üîÉ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤.\nüïò –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..')
    async with aiohttp.ClientSession() as session:
        async with session.get(f'https://api1664409738.bhcesh.me/video/news?limit=50&join_seasons=false&type=serials&token=3794a7638b5863cc60d7b2b9274fa32e&year=2023', timeout=None) as response:
            response = await response.json()
    results = response['results']
    print(len(results))
    results = [result1['id'] for result1 in results]
    results = list(set(results))
    print(len(results))
    news_serials = []
    for result in results:
        film_id = result
        async with aiohttp.ClientSession() as session:
            async with session.get(f'https://api1663355922.bhcesh.me/franchise/details?token=3794a7638b5863cc60d7b2b9274fa32e&id={film_id}&join_seasons=false', timeout=None) as response:
                film_data = await response.json()
        name = film_data['name']
        type = category_list[film_data['type']]
        year = film_data["year"]
        poster = film_data["poster"]
        try:
            kinopoisk = film_data["kinopoisk"]
        except KeyError:
            kinopoisk = None
        try:
            imdb = film_data["imdb"]
        except KeyError:
            imdb = None
        try:
            quality = film_data["quality"]
        except KeyError:
            quality = None
        try:
            country = film_data["country"].values()
            country = ', '.join(country)
        except:
            country = ''
        print(name)
        try:
            genre = film_data['genre'].values()
            genre = ', '.join(genre)
        except:
            genre = ''
        news_serials.append({'id':film_id, 'name': name, 'year': year,'quality':quality,'genre':genre, 'type':type,'country':country,'poster':poster, 'imdb': imdb, 'kinopoisk': kinopoisk})
        await asyncio.sleep(3)
    news_serials = {'data': news_serials}
    current_date = date.today()
    await add_news_serials(news_serials)
    print('update_news_serials | –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
    await bot.send_message(chat_id=chatid, text=f'‚úÖ <b>{current_date}</b> | –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ <b>¬´–ù–æ–≤–∏–Ω–∫–∏¬ª</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\nüÜï –ù–æ–≤—ã–µ <b>—Å–µ—Ä–∏–∞–ª—ã</b> –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\nüëâ @kinozzz_new_bot')

async def update_news_show():
    print('update_news_cartoon | –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –¢–í-—à–æ—É.')
    await bot.send_message(chat_id=admin_id, text='üîÉ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –¢–í-—à–æ—É.\nüïò –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..')
    async with aiohttp.ClientSession() as session:
        async with session.get(f'https://api1664409738.bhcesh.me/video/news?limit=300&type=show&token=3794a7638b5863cc60d7b2b9274fa32e&year=2023', timeout=None) as response:
            response = await response.json()
    results = response['results']
    print(len(results))
    results = [result1['id'] for result1 in results]
    results = list(set(results))
    print(len(results))
    news_show = []
    for result in results:
        film_id = result
        async with aiohttp.ClientSession() as session:
            async with session.get(f'https://api1663355922.bhcesh.me/franchise/details?token=3794a7638b5863cc60d7b2b9274fa32e&id={film_id}&join_seasons=false', timeout=None) as response:
                film_data = await response.json()
        name = film_data['name']
        type = category_list[film_data['type']]
        year = film_data["year"]
        poster = film_data["poster"]
        try:
            kinopoisk = film_data["kinopoisk"]
        except KeyError:
            kinopoisk = None
        try:
            imdb = film_data["imdb"]
        except KeyError:
            imdb = None
        try:
            quality = film_data["quality"]
        except KeyError:
            quality = None
        try:
            country = film_data["country"].values()
            country = ', '.join(country)
        except:
            country = ''
        print(name)
        try:
            genre = film_data['genre'].values()
            genre = ', '.join(genre)
        except:
            genre = ''
        news_show.append({'id':film_id, 'name': name, 'year': year,'quality':quality,'genre':genre, 'type':type,'country':country,'poster':poster, 'imdb': imdb, 'kinopoisk': kinopoisk})
        await asyncio.sleep(3)
    news_show = {'data': news_show}
    current_date = date.today()
    await add_news_show(news_show)
    print('update_news_show | –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
    await bot.send_message(chat_id=chatid, text=f'‚úÖ <b>{current_date}</b> | –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ <b>¬´–ù–æ–≤–∏–Ω–∫–∏¬ª</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\nüÜï –ù–æ–≤—ã–µ <b>–¢–í-—à–æ—É</b> –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\nüëâ @kinozzz_new_bot')

async def update_collections():
    print('update_collections | –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–¥–±–æ—Ä–æ–∫.')
    await bot.send_message(chat_id=admin_id, text='üîÉ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–¥–±–æ—Ä–æ–∫.\nüïò –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..')
    with open('collections.json', 'r', encoding="utf-8") as f:
        collections = json.load(f)
        collections_data = collections['data']
        collections_data = [(collection_items[0], collection_items[1]) for collection_items in collections_data]
    async with aiohttp.ClientSession() as session:
        async with session.get(f'https://api1662739038.bhcesh.me/collection?page=1&token=3794a7638b5863cc60d7b2b9274fa32e') as response:
            response = await response.json()
    test_number = response['total'] - (20*round(response['total']/20))
    if test_number < 10 and test_number > 0:
        pages = round(response['total']/20)+1
    else:
        pages = round(response['total']/20)
    for page in range(1, pages+1):
        async with aiohttp.ClientSession() as session:
            async with session.get(f'https://api1662739038.bhcesh.me/collection?page={page}&token=3794a7638b5863cc60d7b2b9274fa32e') as response:
                response = await response.json()
        collection_results = [(collection_items['id'], collection_items['name']) for collection_items in response['results']]
        collections_data = list(set(collections_data + collection_results))
        await asyncio.sleep(3)
    collections['data'] = sorted(collections_data, key=lambda k: k[0], reverse=False)
    current_date = date.today()
    await add_collection(collections)
    print('update_collections | –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
    await bot.send_message(chat_id=admin_id, text=f'‚úÖ <b>{current_date}</b> | –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\nüéûÔ∏è –ü–æ–¥–±–æ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.')

async def update_collections_films():
    new_films_count = 0
    await bot.send_message(chat_id=admin_id, text='üîÉ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –ø–æ–¥–±–æ—Ä–∫–∞—Ö.\nüïò –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..')
    print('update_collections_films | –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –≤ –ø–æ–¥–±–æ—Ä–∫–∞—Ö.')

    with open('collections.json', 'r', encoding="utf-8") as f:
        collections = json.load(f)
    for collection_items in collections['data'][41:]:
        collection_id = collection_items[0]
        collections_films = db.get_films(collection_id)
        # print('connect')
        async with aiohttp.ClientSession() as session:
            async with session.get(f'https://api1662830368.bhcesh.me/list?collection_id={collection_id}&token=3794a7638b5863cc60d7b2b9274fa32e') as response:
                response = await response.json()
        test_number = response['total'] - (500*round(response['total']/500))
        if test_number < 250 and test_number > 0:
            pages = round(response['total']/500)+1
        else:
            pages = round(response['total']/500)
        print(f'–°—Ç—Ä–∞–Ω–∏—Ü: {pages}')
        await asyncio.sleep(3)
        for page in range(1,pages+1):
            print(f'–ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_id} –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}')
            async with aiohttp.ClientSession() as session:
                async with session.get(f'https://api1662830368.bhcesh.me/list?page={page}&collection_id={collection_id}&limit=500&token=3794a7638b5863cc60d7b2b9274fa32e') as response:
                    response = await response.json()
            try:
                films = response['results']
            except KeyError:
                print(response)
                exit()
            for film in films:
                collection_ids = [film_[1] for film_ in collections_films]
                if str(film['id']) not in collection_ids:
                    new_films_count +=1
                    try:
                        genre = film['genre'].values()
                        genre = ', '.join(genre)
                    except KeyError:
                        genre = ''
                    data = [collection_id, film['id'], film['name'], genre, film["year"], film['iframe_url'], film['poster'], film["type"]]
                    print(data)
                    db.add_film(data)
            await asyncio.sleep(15)
        await asyncio.sleep(15)
    current_date = date.today()
    await bot.send_message(chat_id=chatid, text=f'‚úÖ <b>{current_date}</b> | –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ <b>¬´–ü–æ–¥–±–æ—Ä–∫–∏¬ª</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\nüé¨ –î–æ–±–∞–≤–ª–µ–Ω–æ: <b>{new_films_count}</b> –≤–∏–¥–µ–æ.\n\nüëâ @kinozzz_new_bot')
    print('update_collections_films | –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.')

@dp.message_handler(commands=['start'], state="*")
async def send_welcome(message: types.Message, state: FSMContext):
    await state.finish()
    file = open('users_id.txt', 'r')
    text = file.read()
    if not str(message.from_user.id) in text:
        all_id = open("users_id.txt", "a", encoding="utf-8")
        all_id.write(str(f"{message.from_user.id}\n"))
        datausers.add(message.from_user.id)
        current_date = date.today()
        db.db_table_val(user_id=message.from_user.id, user_name=message.from_user.username, user_register=current_date)
    text = f'<a href="https://avatars.mds.yandex.net/i?id=2ce3a5096355cd725639cbdea2e521aa_l-6295814-images-thumbs&n=33&w=1024&h=576&q=60">üéûÔ∏è</a> <b><u>EvloevFilm_bot</u></b> ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤ —Å–≤–æ—ë–º —Ä–æ–¥–µ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—Å—Ç –í–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å <b>–±–µ—Å–ø–ª–∞—Ç–Ω–æ</b> –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –Ω–æ–≤–∏–Ω–∫–∞–º–∏ <b>–†–æ—Å—Å–∏–π—Å–∫–æ–≥–æ</b> –∏ <b>–∑–∞—Ä—É–±–µ–∂–Ω–æ–≥–æ</b> –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∞ —Å <u>–ª—é–±–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ö–∞–¥—ã—Ä–∞</u>.'
    await bot.send_message(message.from_user.id, f'{text}', reply_markup=inlinekeyboard)

@dp.callback_query_handler(text="popular_menu", state="*")
async def popular_menu(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '<a href="https://bot.kinozzz.ru/poster/popmenu.png">üöÄ</a> –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª <b>¬´–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ¬ª</b>, –∑–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ <b>–ø–æ–ø—É–ª—è—Ä–Ω—ã</b> –Ω–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥.\n\n<i>üëâ –í—ã–±–µ—Ä–∏—Ç–µ <b>–∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>, –≤ –∫–æ—Ç–æ—Ä–æ–π –∂–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å <b>–≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª</b> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.</i>', reply_markup=popular_menu_kb)

# –ù–æ–≤–∏–Ω–∫–∏ (–§–∏–ª—å–º—ã)
@dp.callback_query_handler(text="news_menu", state="*")
async def news_menu(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '<a href="https://bot.kinozzz.ru/poster/news.png">üÜï</a> –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª <b>¬´–ù–æ–≤–∏–Ω–∫–∏¬ª</b>, –∑–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è <b>–Ω–æ–≤—ã–µ</b> –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ <b>–¥–æ–±–∞–≤–ª–µ–Ω—ã</b> –≤ —Ç–µ—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—É—Ç–æ–∫.\n\n<i>üëâ –í—ã–±–µ—Ä–∏—Ç–µ <b>–∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>, –≤ –∫–æ—Ç–æ—Ä–æ–π –∂–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å <b>–≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª</b> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.</i>', reply_markup=news_menu_kb)

@dp.callback_query_handler(text="news_films", state="*")
async def news_menu(call: types.CallbackQuery):
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    with open('news_films.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']

    film_data = popular_films[0]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="news_films_back_", next_prefix="news_films_next_")
    kb = pagination.get_page_keyboard(cur_page=1, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("news_films_next_"))
async def next(call: types.CallbackQuery):
    with open('news_films.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('news_films_next_')[1])-1

    film_data = popular_films[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="news_films_back_", next_prefix="news_films_next_")
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("news_films_back_"))
async def next(call: types.CallbackQuery):
    with open('news_films.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('news_films_back_')[1])-1

    film_data = popular_films[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="news_films_back_", next_prefix="news_films_next_")
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

# –ù–æ–≤–∏–Ω–∫–∏ (–°–µ—Ä–∏–∞–ª—ã)
@dp.callback_query_handler(text="news_serials", state="*")
async def news_menu(call: types.CallbackQuery):
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    with open('news_serials.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']

    film_data = popular_films[0]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="news_serials_back_", next_prefix="news_serials_next_")
    kb = pagination.get_page_keyboard(cur_page=1, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("news_serials_next_"))
async def next(call: types.CallbackQuery):
    with open('news_serials.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('news_serials_next_')[1])-1

    film_data = popular_films[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="news_serials_back_", next_prefix="news_serials_next_")
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("news_serials_back_"))
async def next(call: types.CallbackQuery):
    with open('news_serials.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('news_serials_back_')[1])-1

    film_data = popular_films[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="news_serials_back_", next_prefix="news_serials_next_")
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

# –ù–æ–≤–∏–Ω–∫–∏ (–¢–í-—à–æ—É)
@dp.callback_query_handler(text="news_show", state="*")
async def news_menu(call: types.CallbackQuery):
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    with open('news_show.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']

    film_data = popular_films[0]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="news_show_back_", next_prefix="news_show_next_")
    kb = pagination.get_page_keyboard(cur_page=1, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("news_show_next_"))
async def next(call: types.CallbackQuery):
    with open('news_show.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('news_show_next_')[1])-1

    film_data = popular_films[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="news_show_back_", next_prefix="news_show_next_")
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("news_show_back_"))
async def next(call: types.CallbackQuery):
    with open('news_show.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('news_show_back_')[1])-1

    film_data = popular_films[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="news_show_back_", next_prefix="news_show_next_")
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(text="popular_films", state="*")
async def popular_menu(call: types.CallbackQuery):
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    with open('popular_films.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']

    film_data = popular_films[0]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="popular_filmsback_", next_prefix="popular_filmsnext_")
    kb = pagination.get_page_keyboard(cur_page=1, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("popular_filmsnext_"))
async def next(call: types.CallbackQuery):
    with open('popular_films.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('popular_filmsnext_')[1])-1

    film_data = popular_films[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="popular_filmsback_", next_prefix="popular_filmsnext_")
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("popular_filmsback_"))
async def next(call: types.CallbackQuery):
    with open('popular_films.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('popular_filmsback_')[1])-1

    film_data = popular_films[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="popular_filmsback_", next_prefix="popular_filmsnext_")
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(text="popular_series", state="*")
async def popular_menu(call: types.CallbackQuery):
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    with open('popular_series.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']

    film_data = popular_films[0]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="popular_seriesback_", next_prefix="popular_seriesnext_")
    kb = pagination.get_page_keyboard(cur_page=1, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("popular_seriesnext_"))
async def next(call: types.CallbackQuery):
    with open('popular_series.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('popular_seriesnext_')[1])-1

    film_data = popular_films[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="popular_seriesback_", next_prefix="popular_seriesnext_")
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>?? –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("popular_seriesback_"))
async def next(call: types.CallbackQuery):
    with open('popular_series.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('popular_seriesback_')[1])-1

    film_data = popular_films[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="popular_seriesback_", next_prefix="popular_seriesnext_")
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

# –ù–∞—á–∞–ª–æ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤
@dp.callback_query_handler(text="popular_cartoon", state="*")
async def popular_menu(call: types.CallbackQuery):
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    with open('popular_cartoon.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']

    film_data = popular_films[0]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="popular_cartoonback_", next_prefix="popular_cartoonnext_")
    kb = pagination.get_page_keyboard(cur_page=1, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("popular_cartoonnext_"))
async def next(call: types.CallbackQuery):
    with open('popular_cartoon.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('popular_cartoonnext_')[1])-1

    film_data = popular_films[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="popular_cartoonback_", next_prefix="popular_cartoonnext_")
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("popular_cartoonback_"))
async def next(call: types.CallbackQuery):
    with open('popular_cartoon.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('popular_cartoonback_')[1])-1

    film_data = popular_films[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="popular_cartoonback_", next_prefix="popular_cartoonnext_")
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

# –ù–∞—á–∞–ª–æ –º—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª–æ–≤
@dp.callback_query_handler(text="popular_cartoon_serials", state="*")
async def popular_menu(call: types.CallbackQuery):
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    with open('popular_cartoon_serials.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']

    film_data = popular_films[0]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="popular_cartoon_serials_back_", next_prefix="popular_cartoon_serials_next_")
    kb = pagination.get_page_keyboard(cur_page=1, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("popular_cartoon_serials_next_"))
async def next(call: types.CallbackQuery):
    with open('popular_cartoon_serials.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('popular_cartoon_serials_next_')[1])-1

    film_data = popular_films[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="popular_cartoon_serials_back_", next_prefix="popular_cartoon_serials_next_")
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("popular_cartoon_serials_back_"))
async def next(call: types.CallbackQuery):
    with open('popular_cartoon_serials.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('popular_cartoon_serials_back_')[1])-1

    film_data = popular_films[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="popular_cartoon_serials_back_", next_prefix="popular_cartoon_serials_next_")
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

# –ù–∞—á–∞–ª–æ –∞–Ω–∏–º–µ
@dp.callback_query_handler(text="popular_anime", state="*")
async def popular_menu(call: types.CallbackQuery):
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    with open('popular_anime.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']

    film_data = popular_films[0]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="popular_animeback_", next_prefix="popular_animenext_")
    kb = pagination.get_page_keyboard(cur_page=1, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("popular_animenext_"))
async def next(call: types.CallbackQuery):
    with open('popular_anime.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('popular_animenext_')[1])-1

    film_data = popular_films[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="popular_animeback_", next_prefix="popular_animenext_")
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("popular_animeback_"))
async def next(call: types.CallbackQuery):
    with open('popular_anime.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('popular_animeback_')[1])-1

    film_data = popular_films[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="popular_animeback_", next_prefix="popular_animenext_")
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

# –ù–∞—á–∞–ª–æ –∞–Ω–∏–º–µ-—Å–µ—Ä–∏–∞–ª–æ–≤
@dp.callback_query_handler(text="popular_anime_serials", state="*")
async def popular_menu(call: types.CallbackQuery):
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    with open('popular_anime_serials.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']

    film_data = popular_films[0]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="popular_anime_serials_back_", next_prefix="popular_anime_serials_next_")
    kb = pagination.get_page_keyboard(cur_page=1, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("popular_anime_serials_next_"))
async def next(call: types.CallbackQuery):
    with open('popular_anime_serials.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('popular_anime_serials_next_')[1])-1

    film_data = popular_films[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="popular_anime_serials_back_", next_prefix="popular_anime_serials_next_")
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("popular_anime_serials_back_"))
async def next(call: types.CallbackQuery):
    with open('popular_anime_serials.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('popular_anime_serials_back_')[1])-1

    film_data = popular_films[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="popular_anime_serials_back_", next_prefix="popular_anime_serials_next_")
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

# –ù–∞—á–∞–ª–æ –¢–í-—à–æ—É
@dp.callback_query_handler(text="popular_show", state="*")
async def popular_menu(call: types.CallbackQuery):
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    with open('popular_show.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']

    film_data = popular_films[0]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="popular_showback_", next_prefix="popular_shownext_")
    kb = pagination.get_page_keyboard(cur_page=1, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("popular_shownext_"))
async def next(call: types.CallbackQuery):
    with open('popular_show.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('popular_shownext_')[1])-1

    film_data = popular_films[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="popular_showback_", next_prefix="popular_shownext_")
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("popular_showback_"))
async def next(call: types.CallbackQuery):
    with open('popular_show.json', 'r', encoding="utf-8") as f:
        popular_films = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('popular_showback_')[1])-1

    film_data = popular_films[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    imdb = film_data["imdb"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=popular_films, width=2, back_prefix="popular_showback_", next_prefix="popular_shownext_")
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(text="poisk", state="*")
async def send(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '<a href="https://bot.kinozzz.ru/poster/poisk.png">üîç</a> –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª <b>¬´–ü–æ–∏—Å–∫¬ª</b>, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ <b>—Ç–∏–ø –ø–æ–∏—Å–∫–∞</b>, –∫–æ—Ç–æ—Ä—ã–º –∂–µ–ª–∞–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.', reply_markup=search)

@dp.callback_query_handler(text="categories", state="*")
async def send(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '<a href="https://bot.kinozzz.ru/poster/search_name.png">üîç</a> –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª <b>¬´–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é¬ª</b>, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ <b>–∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>, –≤ –∫–æ—Ç–æ—Ä–æ–π –∂–µ–ª–∞–µ—Ç–µ –Ω–∞–π—Ç–∏ <b>–≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª</b>.', reply_markup=category)

@dp.callback_query_handler(text="collections")
async def send(call: types.CallbackQuery):
    with open('collections.json', 'r', encoding="utf-8") as f:
        collections = json.load(f)
    pagination = InlinePagination(button_datas=[(collection_items[1], collection_items[0]) for collection_items in collections['data']], width=2)
    kb = pagination.get_page_keyboard(cur_page=1)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '<a href="https://bot.kinozzz.ru/poster/collection.png">üéûÔ∏è</a> –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª <b>¬´–ü–æ–¥–±–æ—Ä–∫–∏¬ª</b>, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ <b>–ø–æ–¥–±–æ—Ä–∫—É</b>, –≤ –∫–æ—Ç–æ—Ä–æ–π –∂–µ–ª–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å <b>–≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª</b> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.', reply_markup=kb)

@dp.callback_query_handler(text="news")
async def send(call: types.CallbackQuery):
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    with open('news.json', 'r', encoding="utf-8") as f:
        news = json.load(f)['data']
    film_data = news[0]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    url = film_data["url"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films=news, width=2)
    kb = pagination.get_page_keyboard(cur_page=1, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–∏–Ω–æ–ü–æ–∏—Å–∫:</b> {kinopoisk}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("newsnext_"))
async def next(call: types.CallbackQuery):
    with open('news.json', 'r', encoding="utf-8") as f:
        news = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('newsnext_')[1])-1

    film_data = news[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    url = film_data["url"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films = news, width=2)
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–∏–Ω–æ–ü–æ–∏—Å–∫:</b> {kinopoisk}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("newsback_"))
async def next(call: types.CallbackQuery):
    with open('news.json', 'r', encoding="utf-8") as f:
        news = json.load(f)['data']
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [int(i[0]) for i in favorite_films]
    number_film = int(call.data.split('newsback_')[1])-1

    film_data = news[number_film]
    film_id = film_data['id']
    poster = film_data['poster']
    name = film_data['name']
    year = film_data['year']
    url = film_data["url"]
    country = film_data['country']
    type = film_data['type']
    genre = film_data['genre']
    quality = film_data['quality']
    time = film_data['time']
    kinopoisk = film_data['kinopoisk']

    pagination = NewsPagination(films = news, width=2)
    kb = pagination.get_page_keyboard(cur_page=call.data, fave_status=film_id in favorite_ids)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–∏–Ω–æ–ü–æ–∏—Å–∫:</b> {kinopoisk}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(text="favorites")
async def send(call: types.CallbackQuery):
    favorite_films = db.get_favorites(call.message.chat.id)
    # print(favorite_films)
    if len(favorite_films) == 0:
        await call.answer('‚ùó –í—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –≤ —Å–≤–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏..\n\nüéûÔ∏è –î–æ–±–∞–≤–ª—è–π—Ç–µ –≤ –∑–∞–∫–ª–∞–¥–∫–∏ –ª—é–±–∏–º—ã–µ –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Ö –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –í–∞—Å –≤—Ä–µ–º—è!', show_alert=True)
    else:
        film_id = favorite_films[0][0]
        name = favorite_films[0][2]
        poster = favorite_films[0][6]
        year = favorite_films[0][3]
        genre = favorite_films[0][4]
        url = favorite_films[0][5]
        type = category_list[favorite_films[0][7]]
        pagination = FavoritesPagination(films=favorite_films, width=2)
        kb = pagination.get_page_keyboard(cur_page=1)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("del_favorite|"))
async def next(call: types.CallbackQuery):
    film_id = call.data.split('|')[1]
    # print(film_id)
    favorites = db.get_favorites(call.message.chat.id)
    favorites_ids = [film[0] for film in favorites]
    if str(film_id) in favorites_ids:
        db.del_favorite(film_id)
        await call.answer('‚ùå –í—ã —É–¥–∞–ª–∏–ª–∏ –¥–∞–Ω–Ω—ã–π –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ —Å–≤–æ–∏—Ö –∑–∞–∫–ª–∞–¥–æ–∫!', show_alert=True)
    else:
        await call.answer('‚ùó–î–∞–Ω–Ω—ã–π –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–∞—à–∏—Ö –∑–∞–∫–ª–∞–¥–∫–∞—Ö!', show_alert=True)

@dp.callback_query_handler(lambda c: c.data.startswith("add_favorite|"))
async def next(call: types.CallbackQuery):
    film_id = call.data.split('|')[1]
    favorites = db.get_favorites(call.message.chat.id)
    favorites_ids = [str(film[0]) for film in favorites]
    if film_id not in favorites_ids:
        film_data = db.get_film_by_id(film_id)
        if len(film_data) == 0:
            params = {"id": film_id}
            film_data = requests.get("https://api1663355922.bhcesh.me/franchise/details?token=3794a7638b5863cc60d7b2b9274fa32e", params=params).json()
            try:
                genre = film_data['genre'].values()
                genre = ', '.join(genre)
            except KeyError:
                genre = ''
            data = [film_id, call.message.chat.id, film_data['name'], film_data['year'], genre, film_data["iframe_url"], film_data['poster'], film_data['type']]
        else:
            film_data = film_data[0]
            data = [film_id, call.message.chat.id, film_data[2], film_data[4], film_data[3], film_data[5], film_data[6], film_data[7]]
        db.add_favorite(data)
        await call.answer('‚úÖ –î–∞–Ω–Ω—ã–π –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –∑–∞–∫–ª–∞–¥–∫–∏!', show_alert=True)
    else:
        await call.answer('‚ùó –î–∞–Ω–Ω—ã–π –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–∞—à–∏—Ö –∑–∞–∫–ª–∞–¥–∫–∞—Ö!', show_alert=True)

@dp.callback_query_handler(lambda c: c.data.startswith("favenext_"))
async def next(call: types.CallbackQuery):
    favorite_films = db.get_favorites(call.message.chat.id)
    number_film = int(call.data.split('favenext_')[1])-1
    pagination = FavoritesPagination(films=favorite_films, width=2)
    kb = pagination.get_page_keyboard(cur_page=call.data)

    film_id = favorite_films[number_film][0]
    name = favorite_films[number_film][2]
    poster = favorite_films[number_film][6]
    year = favorite_films[number_film][3]
    genre = favorite_films[number_film][4]
    url = favorite_films[number_film][5]
    type = favorite_films[number_film][7]
    type = category_list[type]
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("faveback_"))
async def next(call: types.CallbackQuery):
    favorite_films = db.get_favorites(call.message.chat.id)
    number_film = int(call.data.split('faveback_')[1])-1
    pagination = FavoritesPagination(films=favorite_films, width=2)
    kb = pagination.get_page_keyboard(cur_page=call.data)

    film_id = favorite_films[number_film][0]
    name = favorite_films[number_film][2]
    poster = favorite_films[number_film][6]
    year = favorite_films[number_film][3]
    genre = favorite_films[number_film][4]
    url = favorite_films[number_film][5]
    type = favorite_films[number_film][7]
    type = category_list[type]
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("item_"))
async def next(call: types.CallbackQuery):
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [str(i[0]) for i in favorite_films]
    collection_id = call.data.split('item_')[1]
    collections_films = db.get_films(collection_id)
    collections_films.reverse()
    film_id = str(collections_films[0][1])
    name = collections_films[0][2]
    poster = collections_films[0][6]
    year = collections_films[0][4]
    genre = collections_films[0][3]
    url = collections_films[0][5]
    type = collections_films[0][7]
    type = category_list[type]
    pagination = InlinePagination2(films=collections_films, width=2)

    kb = pagination.get_page_keyboard(cur_page=1, collection_id=collection_id, fave_status=film_id in favorite_ids)

    kb.row(InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back"))
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("n2_"))
async def next(call: types.CallbackQuery):
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [str(i[0]) for i in favorite_films]
    collection_id = call.data.split('n2_')[1].split('_')[0]
    number_film = int(call.data.split('n2_')[1].split('_')[1])-1
    collections_films = db.get_films(collection_id)
    collections_films.reverse()
    pagination = InlinePagination2(films = collections_films, width=2)
    film_id = collections_films[number_film][1]
    name = collections_films[number_film][2]
    poster = collections_films[number_film][6]
    year = collections_films[number_film][4]
    genre = collections_films[number_film][3]
    url = collections_films[number_film][5]
    type = collections_films[number_film][7]
    type = category_list[type]
    kb = pagination.get_page_keyboard(cur_page=call.data, collection_id=collection_id, fave_status=film_id in favorite_ids)
    kb.row(InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back"))
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data.startswith("b2_"))
async def back_pag(call: types.CallbackQuery):
    favorite_films = db.get_favorites(call.message.chat.id)
    favorite_ids = [i[0] for i in favorite_films]
    collection_id = call.data.split('b2_')[1].split('_')[0]
    number_film = int(call.data.split('b2_')[1].split('_')[1])-1
    collections_films = db.get_films(collection_id)
    collections_films.reverse()
    pagination = InlinePagination2(films = collections_films, width=2)
    film_id = collections_films[number_film][1]
    name = collections_films[number_film][2]
    poster = collections_films[number_film][6]
    year = collections_films[number_film][4]
    genre = collections_films[number_film][3]
    url = collections_films[number_film][5]
    type = collections_films[number_film][7]
    type = category_list[type]
    kb = pagination.get_page_keyboard(cur_page=call.data, collection_id=collection_id, fave_status=film_id in favorite_ids)
    kb.row(InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back"))
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {type}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("n_"))
async def next(call: types.CallbackQuery):
    with open('collections.json', 'r', encoding="utf-8") as f:
        collections = json.load(f)
    pagination = InlinePagination(button_datas=[(collection_items[1], collection_items[0]) for collection_items in collections['data']], width=2)
    kb = pagination.get_page_keyboard(cur_page=call.data)

    await call.message.edit_reply_markup(reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("b_"))
async def back_pag(call: types.CallbackQuery):
    with open('collections.json', 'r', encoding="utf-8") as f:
        collections = json.load(f)
    pagination = InlinePagination(button_datas=[(collection_items[1], collection_items[0]) for collection_items in collections['data']], width=2)
    kb = pagination.get_page_keyboard(cur_page=call.data)

    await call.message.edit_reply_markup(reply_markup=kb)

@dp.callback_query_handler(text="about", state="*")
async def send(call: types.CallbackQuery):
  await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '<a href="https://weare1337.ru/wp-content/uploads/9/6/5/965f4810969dd60480fc5b1180db31b4.jpeg">üéûÔ∏è</a> <b><u>EvloevFilm</u></b> ‚Äî <b>–ø–µ—Ä–≤—ã–π –æ–Ω–ª–∞–π–Ω-–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä</b> –≤ Telegram, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å <b><u>–±–µ—Å–ø–ª–∞—Ç–Ω–æ</u></b> –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –Ω–æ–≤–∏–Ω–∫–∞–º–∏ <b>–†–æ—Å—Å–∏–π—Å–∫–æ–≥–æ</b> –∏ <b>–∑–∞—Ä—É–±–µ–∂–Ω–æ–≥–æ</b> –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∞.\n\nüí° <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>\n‚Äî –£–¥–æ–±–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤, —Å–µ—Ä–∏–∞–ª–æ–≤, –¢–í-—à–æ—É, –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤ –∏ —Ç.–ø. –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é;\n‚Äî <b>–ü–æ–¥–±–æ—Ä–∫–∏</b> –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤;\n‚Äî –§—É–Ω–∫—Ü–∏—è <b>¬´–ú–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏¬ª</b>, —á—Ç–æ–±—ã –ª—é–±–∏–º—ã–µ —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã –±—ã–ª–∏ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º;\n‚Äî –£–¥–æ–±–Ω—ã–π –ø–ª–µ–µ—Ä;\n‚Äî –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª–∞;\n‚Äî –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ–≤–∏–Ω–∫–∞–º–∏ –∫–∏–Ω–æ.', reply_markup=about)

@dp.callback_query_handler(text="contacts", state="*")
async def send(call: types.CallbackQuery):
  await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '<b><a href="https://bot.kinozzz.ru/poster/contacts.png">üî•</a> –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –Ω–æ–≤—ã–º –∏–¥–µ—è–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è –Ω–∞—à–µ–π –ø–ª–æ—â–∞–¥–∫–∏!</b>\n\nüìå <i>–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∂–∞–ª–æ–± –Ω–∞ –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –Ω–∞ —Ñ–æ—Ä—É–º: <b>evloevfilm@gmail.com</b></i>', reply_markup=contacts)

@dp.message_handler(commands=['–∏–Ω—Ñ–∞'])
async def statistic(message: types.Message):
    if message.from_user.id == admin_id:
        inlinekeyboard_stats = types.InlineKeyboardMarkup()
        inlinekeyboard_stats.add(types.InlineKeyboardButton(text="–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stat_all"))
        inlinekeyboard_stats.add(types.InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—É—Ç–∫–∏", callback_data="stat_day"))
        await message.answer('üëâ –í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ —Å–æ–±—Ä–∞–Ω–∞ –≤—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', reply_markup=inlinekeyboard_stats)

    @dp.callback_query_handler(text="stat_all")
    async def send(call: types.CallbackQuery):
        await call.answer()
        with open('users_id.txt') as myfile:
            count = sum(1 for line in myfile)
        await message.answer(f'üëâ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: <b>{count}</b>')

    @dp.callback_query_handler(text="stat_day")
    async def send(call: types.CallbackQuery):
        await call.answer()
        today = date.today()
        await message.answer(f'üëâ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å—É—Ç–∫–∏: <b>{db.get_users_day_reg(today)}</b>')


@dp.message_handler(commands=['—è'])
async def send_all(message: types.Message):
    if message.from_user.id == admin_id:
        for user in datausers:
            try:
                await bot.send_message(user, message.text[message.text.find(" "):])
            except:
                print(f'‚ùó[ {user} ] ‚Äî  –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n\n–°–æ–≤–µ—Ç—É–µ–º —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.')
                pass
        await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–∫–æ–Ω—á–µ–Ω–∞!\n–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        await message.answer('‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.')

#–ü–æ–∏—Å–∫ –ø–æ id
@dp.callback_query_handler(text="search_id", state="*")
async def send(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '<a href="https://bot.kinozzz.ru/poster/search_id.png">üÜî</a> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>ID –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª–∞</b> –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n‚ùó<i><b>–í–∞–∂–Ω–æ:</b> —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID, –¥–∞ –±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–≤–µ—Ä–Ω—É—é –≤—ã–¥–∞—á—É –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª–∞.</i>', reply_markup=go_poisk)
    await GetUserInfo.us_zapros_video.set()
    await call.answer()
    @dp.message_handler(state=GetUserInfo.us_zapros_video)
    async def handle_text(message: types.Message, state: FSMContext):
     await state.update_data(us_zapros_video=message.text)
     data = await state.get_data()
     params = {"kinopoisk_id": {data['us_zapros_video']}}
     response = requests.get("https://api1650820663.bhcesh.me/franchise/details?token=3794a7638b5863cc60d7b2b9274fa32e",params=params).json()
     name = response['name']
     film_id = response['id']
     poster = response['poster']
     year = response['year']
     genre = str(response['genre'])
     file_merge = filter(str.isalpha, genre)
     genre2 = "".join(file_merge)
     genre3 = re.sub(r"(\w)([–ê-–Ø])", r"\1, \2", genre2)
     try:
        country = response["country"].values()
        country = ', '.join(country)
     except:
        country = ''
        url = response['iframe_url']
     try:
        kinopoisk = response["kinopoisk"]
     except:
         kinopoisk = None
     try:
         imdb = response["imdb"]
     except:
          imdb = None
     try:
         quality = response["quality"]
     except:
         quality = None
     type = response['type']
     favorite_films = db.get_favorites(message.from_user.id)
     favorite_ids = [i[0] for i in favorite_films]
     play = types.InlineKeyboardMarkup()
     play.add(types.InlineKeyboardButton(text="üòç –°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω", url=f'https://bot.kinozzz.store/play/?id={film_id}'))
     if film_id in favorite_ids:
         play.row(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫", callback_data=f'del_favorite|{film_id}'))
     else:
          play.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏", callback_data=f'add_favorite|{film_id}'))
          play.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="poisk"),InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back"))
     await bot.send_message(message.from_user.id, f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: </b> {category_list[type]}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre3}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=play)
     await state.finish()

@dp.callback_query_handler(text="films", state="*")
async def send(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '<a href="https://bot.kinozzz.ru/poster/film.png">üîé</a> –£–∫–∞–∂–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <b>—Ñ–∏–ª—å–º–∞</b> –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n‚ùó<i><b>–í–∞–∂–Ω–æ:</b> —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.</i>', reply_markup=inlinekeyboard2)
    await GetUserInfo.us_zapros_film.set()
    await call.answer()
    @dp.message_handler(state=GetUserInfo.us_zapros_film)
    async def handle_text(message: types.Message, state: FSMContext):
            await state.update_data(us_zapros_film=message.text)
            data = await state.get_data()
            params = {"type": 'films', "name": {data['us_zapros_film']}}
            response = requests.get("https://api1650820663.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e", params=params).json()['results']
            try:
                if str(response).count('activate_time') > 1:
                    resultal = 'üîç –í –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–∞—à–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ <b>—Ñ–∏–ª—å–º–æ–≤</b> —Å –ø–æ–¥–æ–±–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º: \n'
                    count_films = str(response).count('activate_time')
                    for i in range(count_films):
                        resultal += f"\nüî∫<b>[ <code>{i}</code> ]</b> {response[i]['name']}"
                        resultal += f" | <b>{response[i]['year']}</b>"
                    resultal += '\n\n‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ü–∏—Ñ—Ä—É <b>—Ñ–∏–ª—å–º–∞</b>, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–µ–Ω.'
                    await message.answer(resultal, reply_markup=inlinekeyboard2)
                    await GetUserInfo.us_zapros_film_number.set()
                    @dp.message_handler(state=GetUserInfo.us_zapros_film_number)
                    async def handle_text(message: types.Message, state: FSMContext):
                        data = await state.get_data()
                        params = {"type": 'films', "name": {data['us_zapros_film']}}
                        response = requests.get("https://api1650820663.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e",params=params).json()['results']
                        name = response[int(message.text)]['name']
                        film_id = response[int(message.text)]['id']
                        poster = response[int(message.text)]['poster']
                        year = response[int(message.text)]['year']
                        genre = str(response[int(message.text)]['genre'])
                        file_merge = filter(str.isalpha, genre)
                        genre2 = "".join(file_merge)
                        genre3 = re.sub(r"(\w)([–ê-–Ø])", r"\1, \2", genre2)
                        try:
                            country = response[int(message.text)]["country"].values()
                            country = ', '.join(country)
                        except:
                            country = ''
                        url = response[int(message.text)]['iframe_url']
                        try:
                            kinopoisk = response[int(message.text)]["kinopoisk"]
                        except:
                            kinopoisk = None
                        try:
                            imdb = response[int(message.text)]["imdb"]
                        except:
                            imdb = None
                        try:
                            quality = response[int(message.text)]["quality"]
                        except:
                            quality = None
                        type = response[int(message.text)]['type']
                        favorite_films = db.get_favorites(message.from_user.id)
                        favorite_ids = [i[0] for i in favorite_films]
                        play = types.InlineKeyboardMarkup()
                        play.add(types.InlineKeyboardButton(text="üòç –°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω", url=f'https://bot.kinozzz.store/play/?id={film_id}'))
                        if film_id in favorite_ids:
                            play.row(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫", callback_data=f'del_favorite|{film_id}'))
                        else:
                            play.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏", callback_data=f'add_favorite|{film_id}'))
                        play.add(InlineKeyboardButton(text="‚óÄÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back"))
                        await bot.send_message(message.from_user.id, f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: </b> {category_list[type]}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre3}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=play)
                        await state.finish()
                else:
                    name = response[0]['name']
                    poster = response[0]['poster']
                    year = response[0]['year']
                    film_id = response[0]['id']
                    genre = str(response[0]['genre'])
                    type = response[0]['type']
                    file_merge = filter(str.isalpha, genre)
                    genre2 = "".join(file_merge)
                    genre3 = re.sub(r"(\w)([–ê-–Ø])", r"\1, \2", genre2)
                    try:
                        country = response[0]["country"].values()
                        country = ', '.join(country)
                    except:
                        country = ''
                    url = response[0]['iframe_url']
                    try:
                        kinopoisk = response[0]["kinopoisk"]
                    except:
                        kinopoisk = None
                    try:
                        imdb = response[0]["imdb"]
                    except:
                        imdb = None
                    try:
                        quality = response[0]["quality"]
                    except:
                        quality = None
                    favorite_films = db.get_favorites(message.from_user.id)
                    favorite_ids = [i[0] for i in favorite_films]
                    play = types.InlineKeyboardMarkup()
                    play.add(types.InlineKeyboardButton(text="üòç –°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω", url=f'https://bot.kinozzz.store/play/?id={film_id}'))
                    if film_id in favorite_ids:
                        play.row(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫", callback_data=f'del_favorite|{film_id}'))
                    else:
                        play.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏", callback_data=f'add_favorite|{film_id}'))
                    play.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
                    InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back"))
                    await bot.send_message(message.from_user.id, f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: </b> {category_list[type]}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre3}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=play)
                    await state.finish()
            except:
                await message.answer('<a href="https://bot.kinozzz.ru/poster/nosearch.png">üòî</a> –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ <b>—Ñ–∏–ª—å–º</b> —Å –ø–æ–¥–æ–±–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.\n\n‚ùó<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.</i>', reply_markup=inlinekeyboard2)
                await state.finish()

@dp.callback_query_handler(text="serials", state="*")
async def send(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '<a href="https://bot.kinozzz.ru/poster/serial.png">üîé</a> –£–∫–∞–∂–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <b>—Å–µ—Ä–∏–∞–ª–∞</b> –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n‚ùó<i><b>–í–∞–∂–Ω–æ:</b> —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.</i>', reply_markup=inlinekeyboard3)
    await GetUserInfo.us_zapros_serial.set()
    await call.answer()
    @dp.message_handler(state=GetUserInfo.us_zapros_serial)
    async def handle_text(message: types.Message, state: FSMContext):
            await state.update_data(us_zapros_serial=message.text)
            data = await state.get_data()
            params = {"type": 'serials', "name": {data['us_zapros_serial']}}
            response = requests.get("https://api1650820663.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e", params=params).json()['results']
            try:
                if str(response).count('activate_time') > 1:
                    resultal = 'üîç –í –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–∞—à–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ <b>—Å–µ—Ä–∏–∞–ª–æ–≤</b> —Å –ø–æ–¥–æ–±–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º: \n'
                    count_serials = str(response).count('activate_time')
                    for i in range(count_serials):
                        resultal += f"\nüî∫<b>[ <code>{i}</code> ]</b> {response[i]['name']}"
                        resultal += f" | <b>{response[i]['year']}</b>"
                    resultal += '\n\n‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ü–∏—Ñ—Ä—É <b>—Å–µ—Ä–∏–∞–ª–∞</b>, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–µ–Ω.'
                    await message.answer(resultal, reply_markup=inlinekeyboard3)
                    await GetUserInfo.us_zapros_serial_number.set()
                    @dp.message_handler(state=GetUserInfo.us_zapros_serial_number)
                    async def handle_text(message: types.Message, state: FSMContext):
                        data = await state.get_data()
                        params = {"type": 'serials', "name": {data['us_zapros_serial']}}
                        response = requests.get("https://api1650820663.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e", params=params).json()['results']
                        film_id = response[int(message.text)]['id']
                        name = response[int(message.text)]['name']
                        poster = response[int(message.text)]['poster']
                        year = response[int(message.text)]['year']
                        genre = str(response[int(message.text)]['genre'])
                        file_merge = filter(str.isalpha, genre)
                        genre2 = "".join(file_merge)
                        type = response[int(message.text)]['type']
                        try:
                            country = response[int(message.text)]["country"].values()
                            country = ', '.join(country)
                        except:
                            country = ''
                        genre3 = re.sub(r"(\w)([–ê-–Ø])", r"\1, \2", genre2)
                        try:
                            kinopoisk = response[int(message.text)]["kinopoisk"]
                        except:
                            kinopoisk = None
                        try:
                            imdb = response[int(message.text)]["imdb"]
                        except:
                            imdb = None
                        try:
                            quality = response[int(message.text)]["quality"]
                        except:
                            quality = None
                        url = response[int(message.text)]['iframe_url']
                        favorite_films = db.get_favorites(message.from_user.id)
                        favorite_ids = [i[0] for i in favorite_films]
                        play = types.InlineKeyboardMarkup()
                        play.add(types.InlineKeyboardButton(text="üòç –°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω", url=f'https://bot.kinozzz.store/play/?id={film_id}'))
                        if film_id in favorite_ids:
                            play.row(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫", callback_data=f'del_favorite|{film_id}'))
                        else:
                            play.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏", callback_data=f'add_favorite|{film_id}'))
                        play.add(InlineKeyboardButton(text="‚óÄÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
                        InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back"))
                        await bot.send_message(message.from_user.id, f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: </b> {category_list[type]}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre3}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=play)
                        await state.finish()
                else:
                    film_id = response[0]['id']
                    name = response[0]['name']
                    poster = response[0]['poster']
                    year = response[0]['year']
                    type = response[0]['type']
                    try:
                        country = response[0]["country"].values()
                        country = ', '.join(country)
                    except:
                        country = ''
                    genre = str(response[0]['genre'])
                    file_merge = filter(str.isalpha, genre)
                    genre2 = "".join(file_merge)
                    genre3 = re.sub(r"(\w)([–ê-–Ø])", r"\1, \2", genre2)
                    url = response[0]['iframe_url']
                    try:
                        kinopoisk = response[0]["kinopoisk"]
                    except:
                        kinopoisk = None
                    try:
                        imdb = response[0]["imdb"]
                    except:
                        imdb = None
                    try:
                        quality = response[0]["quality"]
                    except:
                        quality = None
                    favorite_films = db.get_favorites(message.from_user.id)
                    favorite_ids = [i[0] for i in favorite_films]
                    play = types.InlineKeyboardMarkup()
                    play.add(types.InlineKeyboardButton(text="üòç –°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω", url=f'https://bot.kinozzz.store/play/?id={film_id}'))
                    if film_id in favorite_ids:
                        play.row(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫", callback_data=f'del_favorite|{film_id}'))
                    else:
                        play.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏", callback_data=f'add_favorite|{film_id}'))
                    play.add(InlineKeyboardButton(text="‚óÄÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
                    InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back"))
                    await bot.send_message(message.from_user.id, f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: </b> {category_list[type]}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre3}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=play)
                    await state.finish()
            except:
                await message.answer('<a href="https://bot.kinozzz.ru/poster/nosearch.png">üòî</a> –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ <b>—Å–µ—Ä–∏–∞–ª</b> —Å –ø–æ–¥–æ–±–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.\n\n‚ùó<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.</i>', reply_markup=inlinekeyboard3)
                await state.finish()

@dp.callback_query_handler(text="anime_films", state="*")
async def send(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '<a href="https://bot.kinozzz.ru/poster/anime.png">üîé</a> –£–∫–∞–∂–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <b>–∞–Ω–∏–º–µ-—Ñ–∏–ª—å–º–∞</b> –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n‚ùó<i><b>–í–∞–∂–Ω–æ:</b> —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.</i>', reply_markup=inlinekeyboard4)
    await GetUserInfo.us_zapros_animefilm.set()
    await call.answer()
    @dp.message_handler(state=GetUserInfo.us_zapros_animefilm)
    async def handle_text(message: types.Message, state: FSMContext):
            await state.update_data(us_zapros_animefilm=message.text)
            data = await state.get_data()
            params = {"type": 'anime', "name": {data['us_zapros_animefilm']}}
            response = requests.get("https://api1650820663.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e", params=params).json()['results']
            try:
                if str(response).count('activate_time') > 1:
                    resultal = 'üîç –í –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–∞—à–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ <b>–∞–Ω–∏–º–µ-—Ñ–∏–ª—å–º–æ–≤</b> —Å –ø–æ–¥–æ–±–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º: \n'
                    count_anime_films = str(response).count('activate_time')
                    for i in range(count_anime_films):
                        resultal += f"\nüî∫<b>[ <code>{i}</code> ]</b> {response[i]['name']}"
                        resultal += f" | <b>{response[i]['year']}</b>"
                    resultal += '\n\n‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ü–∏—Ñ—Ä—É <b>–∞–Ω–∏–º–µ-—Ñ–∏–ª—å–º–∞</b>, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–µ–Ω.'
                    await message.answer(resultal, reply_markup=inlinekeyboard4)
                    await GetUserInfo.us_zapros_animefilm_number.set()
                    @dp.message_handler(state=GetUserInfo.us_zapros_animefilm_number)
                    async def handle_text(message: types.Message, state: FSMContext):
                        data = await state.get_data()
                        params = {"type": 'anime', "name": {data['us_zapros_animefilm']}}
                        response = requests.get("https://api1650820663.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e", params=params).json()['results']
                        film_id = response[int(message.text)]['id']
                        name = response[int(message.text)]['name']
                        poster = response[int(message.text)]['poster']
                        try:
                            country = response[int(message.text)]["country"].values()
                            country = ', '.join(country)
                        except:
                            country = ''
                        year = response[int(message.text)]['year']
                        genre = str(response[int(message.text)]['genre'])
                        type = response[int(message.text)]['type']
                        file_merge = filter(str.isalpha, genre)
                        genre2 = "".join(file_merge)
                        genre3 = re.sub(r"(\w)([–ê-–Ø])", r"\1, \2", genre2)
                        try:
                            kinopoisk = response[int(message.text)]["kinopoisk"]
                        except:
                            kinopoisk = None
                        try:
                            imdb = response[int(message.text)]["imdb"]
                        except:
                            imdb = None
                        try:
                            quality = response[int(message.text)]["quality"]
                        except:
                            quality = None
                        url = response[int(message.text)]['iframe_url']
                        favorite_films = db.get_favorites(message.from_user.id)
                        favorite_ids = [i[0] for i in favorite_films]
                        play = types.InlineKeyboardMarkup()
                        play.add(types.InlineKeyboardButton(text="üòç –°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω", url=f'https://bot.kinozzz.store/play/?id={film_id}'))
                        if film_id in favorite_ids:
                            play.row(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫", callback_data=f'del_favorite|{film_id}'))
                        else:
                            play.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏", callback_data=f'add_favorite|{film_id}'))
                        play.add(InlineKeyboardButton(text="‚óÄÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
                        InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back"))
                        await bot.send_message(message.from_user.id, f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: </b> {category_list[type]}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre3}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=play)
                        await state.finish()
                else:
                    film_id = response[0]['id']
                    name = response[0]['name']
                    poster = response[0]['poster']
                    year = response[0]['year']
                    genre = str(response[0]['genre'])
                    type = response[0]['type']
                    try:
                        country = response[0]["country"].values()
                        country = ', '.join(country)
                    except:
                        country = ''
                    file_merge = filter(str.isalpha, genre)
                    genre2 = "".join(file_merge)
                    genre3 = re.sub(r"(\w)([–ê-–Ø])", r"\1, \2", genre2)
                    url = response[0]['iframe_url']
                    try:
                        kinopoisk = response[0]["kinopoisk"]
                    except:
                        kinopoisk = None
                    try:
                        imdb = response[0]["imdb"]
                    except:
                        imdb = None
                    try:
                        quality = response[0]["quality"]
                    except:
                        quality = None
                    favorite_films = db.get_favorites(message.from_user.id)
                    favorite_ids = [i[0] for i in favorite_films]
                    play = types.InlineKeyboardMarkup()
                    play.add(types.InlineKeyboardButton(text="üòç –°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω", url=f'https://bot.kinozzz.store/play/?id={film_id}'))
                    if film_id in favorite_ids:
                        play.row(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫", callback_data=f'del_favorite|{film_id}'))
                    else:
                        play.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏", callback_data=f'add_favorite|{film_id}'))
                    play.add(InlineKeyboardButton(text="‚óÄÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
                    InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back"))
                    await bot.send_message(message.from_user.id, f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: </b> {category_list[type]}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre3}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=play)
                    await state.finish()
            except:
                await message.answer('<a href="https://bot.kinozzz.ru/poster/nosearch.png">üòî</a> –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ <b>–∞–Ω–∏–º–µ-—Ñ–∏–ª—å–º</b> —Å –ø–æ–¥–æ–±–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.\n\n‚ùó<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.</i>', reply_markup=inlinekeyboard4)
                await state.finish()

@dp.callback_query_handler(text="cartoon_serials", state="*")
async def send(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '<a href="https://bot.kinozzz.ru/poster/mserial.png">üîé</a> –£–∫–∞–∂–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <b>–∞–Ω–∏–º–µ-—Å–µ—Ä–∏–∞–ª–∞</b> –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n‚ùó<i><b>–í–∞–∂–Ω–æ:</b> —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.</i>', reply_markup=inlinekeyboard5)
    await GetUserInfo.us_zapros_cartoonser.set()
    await call.answer()
    @dp.message_handler(state=GetUserInfo.us_zapros_cartoonser)
    async def handle_text(message: types.Message, state: FSMContext):
            await state.update_data(us_zapros_cartoonser=message.text)
            data = await state.get_data()
            params = {"type": 'cartoon-serials', "name": {data['us_zapros_cartoonser']}}
            response = requests.get("https://api1650820663.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e", params=params).json()['results']
            try:
                if str(response).count('activate_time') > 1:
                    resultal = 'üîç –í –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–∞—à–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ <b>–º—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª–æ–≤</b> —Å –ø–æ–¥–æ–±–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º: \n'
                    count_cartoon_serials = str(response).count('activate_time')
                    for i in range(count_cartoon_serials):
                        resultal += f"\nüî∫<b>[ <code>{i}</code> ]</b> {response[i]['name']}"
                        resultal += f" | <b>{response[i]['year']}</b>"
                    resultal += '\n\n‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ü–∏—Ñ—Ä—É <b>–º—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª–∞</b>, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–µ–Ω.'
                    await message.answer(resultal, reply_markup=inlinekeyboard5)
                    await GetUserInfo.us_zapros_cartoonser_number.set()
                    @dp.message_handler(state=GetUserInfo.us_zapros_cartoonser_number)
                    async def handle_text(message: types.Message, state: FSMContext):
                        data = await state.get_data()
                        params = {"type": 'cartoon-serials', "name": {data['us_zapros_cartoonser']}}
                        response = requests.get("https://api1650820663.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e", params=params).json()['results']
                        film_id = response[int(message.text)]['id']
                        name = response[int(message.text)]['name']
                        poster = response[int(message.text)]['poster']
                        try:
                            country = response[int(message.text)]["country"].values()
                            country = ', '.join(country)
                        except:
                            country = ''
                        year = response[int(message.text)]['year']
                        type = response[int(message.text)]['type']
                        genre = str(response[int(message.text)]['genre'])
                        file_merge = filter(str.isalpha, genre)
                        genre2 = "".join(file_merge)
                        genre3 = re.sub(r"(\w)([–ê-–Ø])", r"\1, \2", genre2)
                        try:
                            kinopoisk = response[int(message.text)]["kinopoisk"]
                        except:
                            kinopoisk = None
                        try:
                            imdb = response[int(message.text)]["imdb"]
                        except:
                            imdb = None
                        try:
                            quality = response[int(message.text)]["quality"]
                        except:
                            quality = None
                        url = response[int(message.text)]['iframe_url']
                        favorite_films = db.get_favorites(message.from_user.id)
                        favorite_ids = [i[0] for i in favorite_films]
                        play = types.InlineKeyboardMarkup()
                        play.add(types.InlineKeyboardButton(text="üòç –°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω", url=f'https://bot.kinozzz.store/play/?id={film_id}'))
                        if film_id in favorite_ids:
                            play.row(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫", callback_data=f'del_favorite|{film_id}'))
                        else:
                            play.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏", callback_data=f'add_favorite|{film_id}'))
                        play.add(InlineKeyboardButton(text="‚óÄÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
                        InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back"))
                        await bot.send_message(message.from_user.id, f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: </b> {category_list[type]}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre3}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=play)
                        await state.finish()
                else:
                    film_id = response[0]['id']
                    name = response[0]['name']
                    poster = response[0]['poster']
                    year = response[0]['year']
                    genre = str(response[0]['genre'])
                    try:
                        country = response[0]["country"].values()
                        country = ', '.join(country)
                    except:
                        country = ''
                    type = response[0]['type']
                    file_merge = filter(str.isalpha, genre)
                    genre2 = "".join(file_merge)
                    genre3 = re.sub(r"(\w)([–ê-–Ø])", r"\1, \2", genre2)
                    url = response[0]['iframe_url']
                    try:
                        kinopoisk = response[0]["kinopoisk"]
                    except:
                        kinopoisk = None
                    try:
                        imdb = response[0]["imdb"]
                    except:
                        imdb = None
                    try:
                        quality = response[0]["quality"]
                    except:
                        quality = None
                    favorite_films = db.get_favorites(message.from_user.id)
                    favorite_ids = [i[0] for i in favorite_films]
                    play = types.InlineKeyboardMarkup()
                    play.add(types.InlineKeyboardButton(text="üòç –°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω", url=f'https://bot.kinozzz.store/play/?id={film_id}'))
                    if film_id in favorite_ids:
                        play.row(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫", callback_data=f'del_favorite|{film_id}'))
                    else:
                        play.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏", callback_data=f'add_favorite|{film_id}'))
                    play.add(InlineKeyboardButton(text="‚óÄÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
                    InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back"))
                    await bot.send_message(message.from_user.id, f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: </b> {category_list[type]}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre3}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=play)
                    await state.finish()
            except Exception as ex:
                print(ex)
                await message.answer('<a href="https://bot.kinozzz.ru/poster/nosearch.png">üòî</a> –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ <b>–º—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª</b> —Å –ø–æ–¥–æ–±–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.\n\n‚ùó<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.</i>', reply_markup=inlinekeyboard5)
                await state.finish()

@dp.callback_query_handler(text="cartoon", state="*")
async def send(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '<a href="https://bot.kinozzz.ru/poster/mfilm.png">üîé</a> –£–∫–∞–∂–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <b>–º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞</b> –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n‚ùó<i><b>–í–∞–∂–Ω–æ:</b> —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.</i>', reply_markup=inlinekeyboard6)
    await GetUserInfo.us_zapros_cartoon.set()
    await call.answer()
    @dp.message_handler(state=GetUserInfo.us_zapros_cartoon)
    async def handle_text(message: types.Message, state: FSMContext):
            await state.update_data(us_zapros_cartoon=message.text)
            data = await state.get_data()
            params = {"type": 'cartoon', "name": {data['us_zapros_cartoon']}}
            response = requests.get("https://api1650820663.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e", params=params).json()['results']
            try:
                if str(response).count('activate_time') > 1:
                    resultal = 'üîç –í –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–∞—à–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ <b>–º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤</b> —Å –ø–æ–¥–æ–±–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º: \n'
                    count_cartoon = str(response).count('activate_time')
                    for i in range(count_cartoon):
                        resultal += f"\nüî∫<b>[ <code>{i}</code> ]</b> {response[i]['name']}"
                        resultal += f" | <b>{response[i]['year']}</b>"
                    resultal += '\n\n‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ü–∏—Ñ—Ä—É <b>–º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞</b>, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–µ–Ω.'
                    await message.answer(resultal, reply_markup=inlinekeyboard6)
                    await GetUserInfo.us_zapros_cartoon_number.set()
                    @dp.message_handler(state=GetUserInfo.us_zapros_cartoon_number)
                    async def handle_text(message: types.Message, state: FSMContext):
                        data = await state.get_data()
                        params = {"type": 'cartoon', "name": {data['us_zapros_cartoon']}}
                        response = requests.get("https://api1650820663.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e", params=params).json()['results']
                        film_id = response[int(message.text)]['id']
                        name = response[int(message.text)]['name']
                        poster = response[int(message.text)]['poster']
                        try:
                            country = response[int(message.text)]["country"].values()
                            country = ', '.join(country)
                        except:
                            country = ''
                        type = response[int(message.text)]['type']
                        year = response[int(message.text)]['year']
                        genre = str(response[int(message.text)]['genre'])
                        file_merge = filter(str.isalpha, genre)
                        genre2 = "".join(file_merge)
                        genre3 = re.sub(r"(\w)([–ê-–Ø])", r"\1, \2", genre2)
                        try:
                            kinopoisk = response[int(message.text)]["kinopoisk"]
                        except:
                            kinopoisk = None
                        try:
                            imdb = response[int(message.text)]["imdb"]
                        except:
                            imdb = None
                        try:
                            quality = response[int(message.text)]["quality"]
                        except:
                            quality = None
                        url = response[int(message.text)]['iframe_url']
                        favorite_films = db.get_favorites(message.from_user.id)
                        favorite_ids = [i[0] for i in favorite_films]
                        play = types.InlineKeyboardMarkup()
                        play.add(types.InlineKeyboardButton(text="üòç –°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω", url=f'https://bot.kinozzz.store/play/?id={film_id}'))
                        if film_id in favorite_ids:
                            play.row(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫", callback_data=f'del_favorite|{film_id}'))
                        else:
                            play.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏", callback_data=f'add_favorite|{film_id}'))
                        play.add(InlineKeyboardButton(text="‚óÄÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
                        InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back"))
                        await bot.send_message(message.from_user.id, f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: </b> {category_list[type]}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre3}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=play)
                        await state.finish()
                else:
                    film_id = response[0]['id']
                    name = response[0]['name']
                    poster = response[0]['poster']
                    year = response[0]['year']
                    genre = str(response[0]['genre'])
                    try:
                        country = response[0]["country"].values()
                        country = ', '.join(country)
                    except:
                        country = ''
                    type = response[0]['type']
                    file_merge = filter(str.isalpha, genre)
                    genre2 = "".join(file_merge)
                    genre3 = re.sub(r"(\w)([–ê-–Ø])", r"\1, \2", genre2)
                    url = response[0]['iframe_url']
                    try:
                        kinopoisk = response[0]["kinopoisk"]
                    except:
                        kinopoisk = None
                    try:
                        imdb = response[0]["imdb"]
                    except:
                        imdb = None
                    try:
                        quality = response[0]["quality"]
                    except:
                        quality = None
                    favorite_films = db.get_favorites(message.from_user.id)
                    favorite_ids = [i[0] for i in favorite_films]
                    play = types.InlineKeyboardMarkup()
                    play.add(types.InlineKeyboardButton(text="üòç –°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω", url=f'https://bot.kinozzz.store/play/?id={film_id}'))
                    if film_id in favorite_ids:
                        play.row(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫", callback_data=f'del_favorite|{film_id}'))
                    else:
                        play.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏", callback_data=f'add_favorite|{film_id}'))
                    play.add(InlineKeyboardButton(text="‚óÄÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
                    InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back"))
                    await bot.send_message(message.from_user.id, f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: </b> {category_list[type]}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre3}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=play)
                    await state.finish()
            except:
                await message.answer('<a href="https://bot.kinozzz.ru/poster/nosearch.png">üòî</a> –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ <b>–º—É–ª—å—Ç—Ñ–∏–ª—å–º</b> —Å –ø–æ–¥–æ–±–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.\n\n‚ùó<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.</i>', reply_markup=inlinekeyboard6)
                await state.finish()

@dp.callback_query_handler(text="anime_serials", state="*")
async def send(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '<a href="https://bot.kinozzz.ru/poster/anime.png">üîé</a> –£–∫–∞–∂–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <b>–∞–Ω–∏–º–µ-—Å–µ—Ä–∏–∞–ª–∞</b> –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n‚ùó<i><b>–í–∞–∂–Ω–æ:</b> —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.</i>', reply_markup=inlinekeyboard7)
    await GetUserInfo.us_zapros_animeser.set()
    await call.answer()
    @dp.message_handler(state=GetUserInfo.us_zapros_animeser)
    async def handle_text(message: types.Message, state: FSMContext):
            await state.update_data(us_zapros_animeser=message.text)
            data = await state.get_data()
            params = {"type": 'anime-serials', "name": {data['us_zapros_animeser']}}
            response = requests.get("https://api1650820663.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e", params=params).json()['results']
            try:
                if str(response).count('activate_time') > 1:
                    resultal = 'üîç –í –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–∞—à–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ <b>–∞–Ω–∏–º–µ-—Å–µ—Ä–∏–∞–ª–æ–≤</b> —Å –ø–æ–¥–æ–±–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º: \n'
                    count_anime_serials = str(response).count('activate_time')
                    for i in range(count_anime_serials):
                        resultal += f"\nüî∫<b>[ <code>{i}</code> ]</b> {response[i]['name']}"
                        resultal += f" | <b>{response[i]['year']}</b>"
                    resultal += '\n\n‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ü–∏—Ñ—Ä—É <b>–∞–Ω–∏–º–µ-—Å–µ—Ä–∏–∞–ª–∞</b>, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–µ–Ω.'
                    await message.answer(resultal, reply_markup=inlinekeyboard7)
                    await GetUserInfo.us_zapros_animeser_number.set()
                    @dp.message_handler(state=GetUserInfo.us_zapros_animeser_number)
                    async def handle_text(message: types.Message, state: FSMContext):
                        data = await state.get_data()
                        params = {"type": 'anime-serials', "name": {data['us_zapros_animeser']}}
                        response = requests.get("https://api1650820663.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e", params=params).json()['results']
                        film_id = response[int(message.text)]['id']
                        name = response[int(message.text)]['name']
                        try:
                            country = response[int(message.text)]["country"].values()
                            country = ', '.join(country)
                        except:
                            country = ''
                        type = response[int(message.text)]['type']
                        poster = response[int(message.text)]['poster']
                        year = response[int(message.text)]['year']
                        genre = str(response[int(message.text)]['genre'])
                        file_merge = filter(str.isalpha, genre)
                        genre2 = "".join(file_merge)
                        genre3 = re.sub(r"(\w)([–ê-–Ø])", r"\1, \2", genre2)
                        try:
                            kinopoisk = response[int(message.text)]["kinopoisk"]
                        except:
                            kinopoisk = None
                        try:
                            imdb = response[int(message.text)]["imdb"]
                        except:
                            imdb = None
                        try:
                            quality = response[int(message.text)]["quality"]
                        except:
                            quality = None
                        url = response[int(message.text)]['iframe_url']
                        favorite_films = db.get_favorites(message.from_user.id)
                        favorite_ids = [i[0] for i in favorite_films]
                        play = types.InlineKeyboardMarkup()
                        play.add(types.InlineKeyboardButton(text="üòç –°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω", url=f'https://bot.kinozzz.store/play/?id={film_id}'))
                        if film_id in favorite_ids:
                            play.row(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫", callback_data=f'del_favorite|{film_id}'))
                        else:
                            play.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏", callback_data=f'add_favorite|{film_id}'))
                        play.add(InlineKeyboardButton(text="‚óÄÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
                        InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back"))
                        await bot.send_message(message.from_user.id, f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: </b> {category_list[type]}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre3}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=play)
                        await state.finish()
                else:
                    film_id = response[0]['id']
                    name = response[0]['name']
                    poster = response[0]['poster']
                    year = response[0]['year']
                    genre = str(response[0]['genre'])
                    try:
                        country = response[0]["country"].values()
                        country = ', '.join(country)
                    except:
                        country = ''
                    file_merge = filter(str.isalpha, genre)
                    type = response[0]['type']
                    genre2 = "".join(file_merge)
                    genre3 = re.sub(r"(\w)([–ê-–Ø])", r"\1, \2", genre2)
                    url = response[0]['iframe_url']
                    try:
                        kinopoisk = response[0]["kinopoisk"]
                    except:
                        kinopoisk = None
                    try:
                        imdb = response[0]["imdb"]
                    except:
                        imdb = None
                    try:
                        quality = response[0]["quality"]
                    except:
                        quality = None
                    favorite_films = db.get_favorites(message.from_user.id)
                    favorite_ids = [i[0] for i in favorite_films]
                    play = types.InlineKeyboardMarkup()
                    play.add(types.InlineKeyboardButton(text="üòç –°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω", url=f'https://bot.kinozzz.store/play/?id={film_id}'))
                    if film_id in favorite_ids:
                        play.row(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫", callback_data=f'del_favorite|{film_id}'))
                    else:
                        play.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏", callback_data=f'add_favorite|{film_id}'))
                    play.add(InlineKeyboardButton(text="‚óÄÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
                    InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back"))
                    await bot.send_message(message.from_user.id, f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: </b> {category_list[type]}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre3}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=play)
                    await state.finish()
            except:
                await message.answer('<a href="https://bot.kinozzz.ru/poster/nosearch.png">üòî</a> –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ <b>–∞–Ω–∏–º–µ-—Å–µ—Ä–∏–∞–ª</b> —Å –ø–æ–¥–æ–±–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.\n\n‚ùó<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.</i>', reply_markup=inlinekeyboard7)
                await state.finish()

@dp.callback_query_handler(text="tv", state="*")
async def send(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '<a href="https://bot.kinozzz.ru/poster/show.png">üîé</a> –£–∫–∞–∂–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <b>–¢–í-—à–æ—É</b> –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n‚ùó<i><b>–í–∞–∂–Ω–æ:</b> —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.</i>', reply_markup=inlinekeyboard8)
    await GetUserInfo.us_zapros_tv.set()
    await call.answer()
    @dp.message_handler(state=GetUserInfo.us_zapros_tv)
    async def handle_text(message: types.Message, state: FSMContext):
            await state.update_data(us_zapros_tv=message.text)
            data = await state.get_data()
            params = {"type": 'show', "name": {data['us_zapros_tv']}}
            response = requests.get("https://api1650820663.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e", params=params).json()['results']
            try:
                if str(response).count('activate_time') > 1:
                    resultal = 'üîç –í –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–∞—à–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ <b>–¢–í-–®–æ—É</b> —Å –ø–æ–¥–æ–±–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º: \n'
                    count_tv = str(response).count('activate_time')
                    for i in range(count_tv):
                        resultal += f"\nüî∫<b>[ <code>{i}</code> ]</b> {response[i]['name']}"
                        resultal += f" | <b>{response[i]['year']}</b>"
                    resultal += '\n\n‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ü–∏—Ñ—Ä—É <b>–¢–í-–®–æ—É</b>, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–µ–Ω.'
                    await message.answer(resultal, reply_markup=inlinekeyboard8)
                    await GetUserInfo.us_zapros_tv_number.set()
                    @dp.message_handler(state=GetUserInfo.us_zapros_tv_number)
                    async def handle_text(message: types.Message, state: FSMContext):
                        data = await state.get_data()
                        params = {"type": 'show', "name": {data['us_zapros_tv']}}
                        response = requests.get("https://api1650820663.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e", params=params).json()['results']
                        film_id = response[int(message.text)]['id']
                        name = response[int(message.text)]['name']
                        try:
                            country = response[int(message.text)]["country"].values()
                            country = ', '.join(country)
                        except:
                            country = ''
                        poster = response[int(message.text)]['poster']
                        year = response[int(message.text)]['year']
                        genre = str(response[int(message.text)]['genre'])
                        type = response[int(message.text)]['type']
                        file_merge = filter(str.isalpha, genre)
                        genre2 = "".join(file_merge)
                        genre3 = re.sub(r"(\w)([–ê-–Ø])", r"\1, \2", genre2)
                        try:
                            kinopoisk = response[int(message.text)]["kinopoisk"]
                        except:
                            kinopoisk = None
                        try:
                            imdb = response[int(message.text)]["imdb"]
                        except:
                            imdb = None
                        try:
                            quality = response[int(message.text)]["quality"]
                        except:
                            quality = None
                        url = response[int(message.text)]['iframe_url']
                        favorite_films = db.get_favorites(message.from_user.id)
                        favorite_ids = [i[0] for i in favorite_films]
                        play = types.InlineKeyboardMarkup()
                        play.add(types.InlineKeyboardButton(text="üòç –°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω", url=f'https://bot.kinozzz.store/play/?id={film_id}'))
                        if film_id in favorite_ids:
                            play.row(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫", callback_data=f'del_favorite|{film_id}'))
                        else:
                            play.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏", callback_data=f'add_favorite|{film_id}'))
                        play.add(InlineKeyboardButton(text="‚óÄÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
                        InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back"))
                        await bot.send_message(message.from_user.id, f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: </b> {category_list[type]}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre3}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=play)
                        await state.finish()
                else:
                    film_id = response[0]['id']
                    name = response[0]['name']
                    poster = response[0]['poster']
                    year = response[0]['year']
                    genre = str(response[0]['genre'])
                    try:
                        country = response[0]["country"].values()
                        country = ', '.join(country)
                    except:
                        country = ''
                    type = response[0]['type']
                    file_merge = filter(str.isalpha, genre)
                    genre2 = "".join(file_merge)
                    genre3 = re.sub(r"(\w)([–ê-–Ø])", r"\1, \2", genre2)
                    url = response[0]['iframe_url']
                    try:
                        kinopoisk = response[0]["kinopoisk"]
                    except:
                        kinopoisk = None
                    try:
                        imdb = response[0]["imdb"]
                    except:
                        imdb = None
                    try:
                        quality = response[0]["quality"]
                    except:
                        quality = None
                    favorite_films = db.get_favorites(message.from_user.id)
                    favorite_ids = [i[0] for i in favorite_films]
                    play = types.InlineKeyboardMarkup()
                    play.add(types.InlineKeyboardButton(text="üòç –°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω", url=f'https://bot.kinozzz.store/play/?id={film_id}'))
                    if film_id in favorite_ids:
                        play.row(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫", callback_data=f'del_favorite|{film_id}'))
                    else:
                        play.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏", callback_data=f'add_favorite|{film_id}'))
                    play.add(InlineKeyboardButton(text="‚óÄÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
                    InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back"))
                    await bot.send_message(message.from_user.id, f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: </b> {category_list[type]}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre3}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=play)
                    await state.finish()
            except:
                await message.answer('<a href="https://bot.kinozzz.ru/poster/nosearch.png">üòî</a> –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ <b>–¢–í-–®–æ—É</b> —Å –ø–æ–¥–æ–±–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.\n\n‚ùó<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.</i>', reply_markup=inlinekeyboard8)
                await state.finish()
@dp.callback_query_handler(text="favorits", state="*")
async def send(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= '<a href="https://www.dkmitino.ru/upload/iblock/2e6/1500910719-roskino.jpg">üîé</a> –£–∫–∞–∂–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <b>—Ñ–∏–ª—å–º–∞</b> –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n‚ùó<i><b>–í–∞–∂–Ω–æ:</b> —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞,–µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏—â–∏—Ç–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</i>', reply_markup=inlinekeyboard11)
    await GetUserInfo.us_zapros_film.set()
    await call.answer()
    @dp.message_handler(state=GetUserInfo.us_zapros_film)
    async def handle_text(message: types.Message, state: FSMContext):
            await state.update_data(us_zapros_favorits=message.text)
            data = await state.get_data()
            params = {"type": 'favorits', "name": {data['us_zapros_favorits']}}
            response = requests.get("https://api1650820663.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e", params=params).json()['results']
            try:
                if str(response).count('activate_time') > 1:
                    resultal = 'üîç –í –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–∞—à–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ <b>—Ñ–∏–ª—å–º–æ–≤</b> —Å –ø–æ–¥–æ–±–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º: \n'
                    count_favorits = str(response).count('activate_time')
                    for i in range(count_favorits):
                        resultal += f"\nüî∫<b>[ <code>{i}</code> ]</b> {response[i]['name']}"
                        resultal += f" | <b>{response[i]['year']}</b>"
                    resultal += '\n\n‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ü–∏—Ñ—Ä—É <b>—Ñ–∏–ª—å–º–∞</b>, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–µ–Ω.'
                    await message.answer(resultal, reply_markup=inlinekeyboard11)
                    await GetUserInfo.us_zapros_film_number.set()
                    @dp.message_handler(state=GetUserInfo.us_zapros_film_number)
                    async def handle_text(message: types.Message, state: FSMContext):
                        data = await state.get_data()
                        params = {"type": 'favorits', "name": {data['us_zapros_favorits']}}
                        response = requests.get("https://api1650820663.bhcesh.me/list?token=3794a7638b5863cc60d7b2b9274fa32e",params=params).json()['results']
                        name = response[int(message.text)]['name']
                        film_id = response[int(message.text)]['id']
                        poster = response[int(message.text)]['poster']
                        year = response[int(message.text)]['year']
                        genre = str(response[int(message.text)]['genre'])
                        file_merge = filter(str.isalpha, genre)
                        genre2 = "".join(file_merge)
                        genre3 = re.sub(r"(\w)([–ê-–Ø])", r"\1, \2", genre2)
                        try:
                            country = response[int(message.text)]["country"].values()
                            country = ', '.join(country)
                        except:
                            country = ''
                        url = response[int(message.text)]['iframe_url']
                        try:
                            kinopoisk = response[int(message.text)]["kinopoisk"]
                        except:
                            kinopoisk = None
                        try:
                            imdb = response[int(message.text)]["imdb"]
                        except:
                            imdb = None
                        try:
                            quality = response[int(message.text)]["quality"]
                        except:
                            quality = None
                        type = response[int(message.text)]['type']
                        favorite_films = db.get_favorites(message.from_user.id)
                        favorite_ids = [i[0] for i in favorite_films]
                        play = types.InlineKeyboardMarkup()
                        play.add(types.InlineKeyboardButton(text="üòç –°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω", url=f'https://bot.kinozzz.ru/play/?id={film_id}'))
                        if film_id in favorite_ids:
                            play.row(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫", callback_data=f'del_favorite|{film_id}'))
                        else:
                            play.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏", callback_data=f'add_favorite|{film_id}'))
                        play.add(InlineKeyboardButton(text="‚óÄÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back"))
                        await bot.send_message(message.from_user.id, f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: </b> {category_list[type]}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre3}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=play)
                        await state.finish()
                else:
                    name = response[0]['name']
                    poster = response[0]['poster']
                    year = response[0]['year']
                    film_id = response[0]['id']
                    genre = str(response[0]['genre'])
                    type = response[0]['type']
                    file_merge = filter(str.isalpha, genre)
                    genre2 = "".join(file_merge)
                    genre3 = re.sub(r"(\w)([–ê-–Ø])", r"\1, \2", genre2)
                    try:
                        country = response[0]["country"].values()
                        country = ', '.join(country)
                    except:
                        country = ''
                    url = response[0]['iframe_url']
                    try:
                        kinopoisk = response[0]["kinopoisk"]
                    except:
                        kinopoisk = None
                    try:
                        imdb = response[0]["imdb"]
                    except:
                        imdb = None
                    try:
                        quality = response[0]["quality"]
                    except:
                        quality = None
                    favorite_films = db.get_favorites(message.from_user.id)
                    favorite_ids = [i[0] for i in favorite_films]
                    play = types.InlineKeyboardMarkup()
                    play.add(types.InlineKeyboardButton(text="üòç –°–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω", url=f'https://bot.kinozzz.ru/play/?id={film_id}'))
                    if film_id in favorite_ids:
                        play.row(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫", callback_data=f'del_favorite|{film_id}'))
                    else:
                        play.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏", callback_data=f'add_favorite|{film_id}'))
                    play.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
                    InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="back"))
                    await bot.send_message(message.from_user.id, f'<b><a href="{poster}">‚ñ∂Ô∏è</a> –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n<b>üèÖ –ö–ü:</b> {kinopoisk} | <b>IMDb:</b> {imdb}\n<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {country}\n<b>üìÄ –ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: </b> {category_list[type]}\n<b>üé¶ –ñ–∞–Ω—Ä:</b> {genre3}\n<b>üóìÔ∏è –ì–æ–¥:</b> {year}', reply_markup=play)
                    await state.finish()
            except:
                await message.answer('<a href="https://bot.kinozzz.ru/poster/nosearch.png">üòî</a> –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ <b>—Ñ–∏–ª—å–º</b> —Å –ø–æ–¥–æ–±–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.\n\n‚ùó<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.</i>', reply_markup=inlinekeyboard11)
                await state.finish()

@dp.message_handler(content_types=['text'])
async def send_all(message):
  await bot.send_message(message.from_user.id, f'‚ùó–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n<a href="https://bot.kinozzz.ru/poster/error.png">üè†</a> <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b></i>.', reply_markup=exit)

@dp.callback_query_handler(text="back", state="*")
async def back(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= 'üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>.\n\n<a href="https://bot.kinozzz.ru/poster/general.png">üé¶</a> –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å <b>—Ä–∞–∑–¥–µ–ª</b>, –≤ –∫–æ—Ç–æ—Ä–æ–º –∂–µ–ª–∞–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.', reply_markup=inlinekeyboard, inline_message_id=call.inline_message_id)

async def on_startup(dp: Dispatcher):
    print('~~~ Kinozzz –∫–∏—á –≤–∞! ~~~')
    
    await bot.send_message(chat_id=admin_id, text='üöÄ <b>–í–∞—à Bot</b> —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ <b>/start</b>\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É <b>/–∏–Ω—Ñ–∞</b>\n–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É <b>/—è –∏ –í–∞—à —Ç–µ–∫—Å—Ç</b>\n<b>–ë–æ—Ç —Å–¥–µ–ª–∞–Ω –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –ï–≤–ª–æ–µ–≤ –ê–±–¥—É–ª-–ö–∞–¥—ã—Ä.</b>')
    #await bot.send_message(chat_id=admin_id, text='üöÄ <b>Kinozzz Bot</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>/start</b> –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.')
    # await update_popular_anime()
    # await update_popular_mult()
    # await update_news_films()
    # await update_popular()
    # await update_collections()
    # await update_popular_show()
    scheduler.add_job(update_news_films, 'cron', hour=11, minute=16)
    scheduler.add_job(update_news_serials, 'cron', hour=12, minute=29)
    scheduler.add_job(update_news_show, 'cron', hour=13, minute=18)
    # scheduler.add_job(update_domain, 'interval', minutes=60)
    scheduler.add_job(update_popular, 'cron', hour=1, minute=10)
    scheduler.add_job(update_popular_mult, 'cron', hour=2, minute=30)
    scheduler.add_job(update_popular_anime, 'cron', hour=3, minute=50)
    scheduler.add_job(update_popular_show, 'cron', hour=5, minute=40)
    scheduler.add_job(update_collections_films, 'cron', hour=7, minute=10)
    scheduler.add_job(update_collections, 'cron', hour=23, minute=40)

if __name__ == "__main__":
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.start()
    executor.start_polling(dp, on_startup=on_startup)

